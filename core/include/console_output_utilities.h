#pragma once

#include <functional>
#include <iomanip>
#include <iostream>
#include <string_view>

#include "bitwise_utilities.h"
#include "register_file.h"

namespace GameBoyCore
{

inline void print_bytes_in_range(std::function<uint8_t(uint16_t, bool)> read_byte, uint16_t start_address, uint16_t end_address)
{
    std::cout << std::hex << std::uppercase << std::setfill('0');
    std::cout << "=========== Memory Range 0x" << std::setw(4) << start_address << " - 0x" << std::setw(4) << end_address << " ============\n";

    for (uint32_t address = start_address; address <= end_address; address++)
    {
        const uint16_t remainder = address % 0x10;

        if (address == start_address || remainder == 0)
        {
            const uint16_t line_offset = address - remainder;
            std::cout << std::setw(4) << line_offset << ": ";

            for (uint16_t i = 0; i < remainder; i++)
            {
                std::cout << "   ";
            }
        }
        std::cout << std::setw(2) << static_cast<int>(read_byte(address, false)) << " ";

        if ((address + 1) % 0x10 == 0)
        {
            std::cout << "\n";
        }
    }

    if ((end_address + 1) % 0x10 != 0)
    {
        std::cout << "\n";
    }
    std::cout << "=====================================================\n";
}

inline void print_register_file_state(RegisterFile<std::endian::native> register_file)
{
    std::cout << "=================== CPU Registers ===================\n";
    std::cout << std::hex << std::setfill('0');

    std::cout << "AF: 0x" << std::setw(4) << register_file.AF << "   "
              << "(A: 0x" << std::setw(2) << static_cast<int>(register_file.A) << ","
              << " F: 0x" << std::setw(2) << static_cast<int>(register_file.flags) << ")   "
              << "Flags ZNHC: " << (is_flag_set(register_file.flags, ZERO_FLAG_MASK) ? "1" : "0")
              << (is_flag_set(register_file.flags, SUBTRACT_FLAG_MASK) ? "1" : "0")
              << (is_flag_set(register_file.flags, HALF_CARRY_FLAG_MASK) ? "1" : "0")
              << (is_flag_set(register_file.flags, CARRY_FLAG_MASK) ? "1" : "0") << "\n";

    std::cout << "BC: 0x" << std::setw(4) << register_file.BC << "   "
              << "(B: 0x" << std::setw(2) << static_cast<int>(register_file.B) << ","
              << " C: 0x" << std::setw(2) << static_cast<int>(register_file.C) << ")\n";

    std::cout << "DE: 0x" << std::setw(4) << register_file.DE << "   "
              << "(D: 0x" << std::setw(2) << static_cast<int>(register_file.D) << ","
              << " E: 0x" << std::setw(2) << static_cast<int>(register_file.E) << ")\n";

    std::cout << "HL: 0x" << std::setw(4) << register_file.HL << "   "
              << "(H: 0x" << std::setw(2) << static_cast<int>(register_file.H) << ","
              << " L: 0x" << std::setw(2) << static_cast<int>(register_file.L) << ")\n";

    std::cout << "Stack Pointer: 0x" << std::setw(4) << register_file.stack_pointer << "\n";
    std::cout << "Program Counter: 0x" << std::setw(4) << register_file.program_counter << "\n";
    std::cout << "=====================================================\n";
}

inline bool set_error_message_and_fail(std::string_view error_message_text, std::string& output_error_message)
{
    std::cerr << std::string("Error: ") << error_message_text << "\n";
    output_error_message = error_message_text;
    return false;
}

static const char* central_processing_unit_instruction_mnemonics[256] =
{
    "00: NOP",
    "01: LD BC, u16",
    "02: LD (BC), A",
    "03: INC BC",
    "04: INC B",
    "05: DEC B",
    "06: LD B,u8",
    "07: RLCA",
    "08: LD (u16), SP",
    "09: ADD HL, BC",
    "0A: LD A, (BC)",
    "0B: DEC BC",
    "0C: INC C",
    "0D: DEC C",
    "0E: LD C, u8",
    "0F: RRCA",
    "10: STOP",
    "11: LD DE, u16",
    "12: LD (DE), A",
    "13: INC DE",
    "14: INC D",
    "15: DEC D",
    "16: LD D, u8",
    "17: RLA",
    "18: JR i8",
    "19: ADD HL, DE",
    "1A: LD A, (DE)",
    "1B: DEC DE",
    "1C: INC E",
    "1D: DEC E",
    "1E: LD E, u8",
    "1F: RRA",
    "20: JR NZ, i8",
    "21: LD HL, u16",
    "22: LDI (HL), A",
    "23: INC HL",
    "24: INC H",
    "25: DEC H",
    "26: LD H, u8",
    "27: DAA",
    "28: JR Z, i8",
    "29: ADD HL, HL",
    "2A: LDI A, (HL)",
    "2B: DEC HL",
    "2C: INC L",
    "2D: DEC L",
    "2E: LD L, u8",
    "2F: CPL",
    "30: JR NC, i8",
    "31: LD SP, u16",
    "32: LDD (HL), A",
    "33: INC SP",
    "34: INC (HL)",
    "35: DEC (HL)",
    "36: LD (HL), u8",
    "37: SCF",
    "38: JR C, i8",
    "39: ADD HL, SP",
    "3A: LDD A, (HL)",
    "3B: DEC SP",
    "3C: INC A",
    "3D: DEC A",
    "3E: LD A, u8",
    "3F: CCF",
    "40: LD B, B",
    "41: LD B, C",
    "42: LD B, D",
    "43: LD B, E",
    "44: LD B, H",
    "45: LD B, L",
    "46: LD B, (HL)",
    "47: LD B, A",
    "48: LD C, B",
    "49: LD C, C",
    "4A: LD C, D",
    "4B: LD C, E",
    "4C: LD C, H",
    "4D: LD C, L",
    "4E: LD C, (HL)",
    "4F: LD C, A",
    "50: LD D, B",
    "51: LD D, C",
    "52: LD D, D",
    "53: LD D, E",
    "54: LD D, H",
    "55: LD D, L",
    "56: LD D, (HL)",
    "57: LD D, A",
    "58: LD E, B",
    "59: LD E, C",
    "5A: LD E, D",
    "5B: LD E, E",
    "5C: LD E, H",
    "5D: LD E, L",
    "5E: LD E, (HL)",
    "5F: LD E, A",
    "60: LD H, B",
    "61: LD H, C",
    "62: LD H, D",
    "63: LD H, E",
    "64: LD H, H",
    "65: LD H, L",
    "66: LD H, (HL)",
    "67: LD H, A",
    "68: LD L, B",
    "69: LD L, C",
    "6A: LD L, D",
    "6B: LD L, E",
    "6C: LD L, H",
    "6D: LD L, L",
    "6E: LD L, (HL)",
    "6F: LD L, A",
    "70: LD (HL), B",
    "71: LD (HL), C",
    "72: LD (HL), D",
    "73: LD (HL), E",
    "74: LD (HL), H",
    "75: LD (HL), L",
    "76: HALT",
    "77: LD (HL), A",
    "78: LD A, B",
    "79: LD A, C",
    "7A: LD A, D",
    "7B: LD A, E",
    "7C: LD A, H",
    "7D: LD A, L",
    "7E: LD A, (HL)",
    "7F: LD A, A",
    "80: ADD A, B",
    "81: ADD A, C",
    "82: ADD A, D",
    "83: ADD A, E",
    "84: ADD A, H",
    "85: ADD A, L",
    "86: ADD A, (HL)",
    "87: ADD A",
    "88: ADC B",
    "89: ADC C",
    "8A: ADC D",
    "8B: ADC E",
    "8C: ADC H",
    "8D: ADC L",
    "8E: ADC (HL)",
    "8F: ADC A",
    "90: SUB B",
    "91: SUB C",
    "92: SUB D",
    "93: SUB E",
    "94: SUB H",
    "95: SUB L",
    "96: SUB (HL)",
    "97: SUB A",
    "98: SBC B",
    "99: SBC C",
    "9A: SBC D",
    "9B: SBC E",
    "9C: SBC H",
    "9D: SBC L",
    "9E: SBC (HL)",
    "9F: SBC A",
    "A0: AND B",
    "A1: AND C",
    "A2: AND D",
    "A3: AND E",
    "A4: AND H",
    "A5: AND L",
    "A6: AND (HL)",
    "A7: AND A",
    "A8: XOR B",
    "A9: XOR C",
    "AA: XOR D",
    "AB: XOR E",
    "AC: XOR H",
    "AD: XOR L",
    "AE: XOR (HL)",
    "AF: XOR A",
    "B0: OR B",
    "B1: OR C",
    "B2: OR D",
    "B3: OR E",
    "B4: OR H",
    "B5: OR L",
    "B6: OR (HL)",
    "B7: OR A",
    "B8: CP B",
    "B9: CP C",
    "BA: CP D",
    "BB: CP E",
    "BC: CP H",
    "BD: CP L",
    "BE: CP (HL)",
    "BF: CP A",
    "C0: RET NZ",
    "C1: POP BC",
    "C2: JP NZ, u16",
    "C3: JP u16",
    "C4: CALL NZ, u16",
    "C5: PUSH BC",
    "C6: ADD A, u8",
    "C7: RST 0x00",
    "C8: RET Z",
    "C9: RET",
    "CA: JP Z, u16",
    "CB: CB %02X",
    "CC: CALL Z, u16",
    "CD: CALL u16",
    "CE: ADC u16",
    "CF: RST 0x08",
    "D0: RET NC",
    "D1: POP DE",
    "D2: JP NC, u16",
    "D3: UNUSED",
    "D4: CALL NC, u16",
    "D5: PUSH DE",
    "D6: SUB u8",
    "D7: RST 0x10",
    "D8: RET C",
    "D9: RETI",
    "DA: JP C, u16",
    "DB: UNUSED",
    "DC: CALL C, u16",
    "DD: UNUSED",
    "DE: SBC u8",
    "DF: RST 0x18",
    "E0: LD (0xFF00 + u8), A",
    "E1: POP HL",
    "E2: LD (0xFF00 + C), A",
    "E3: UNUSED",
    "E4: UNUSED",
    "E5: PUSH HL",
    "E6: AND u8",
    "E7: RST 0x20",
    "E8: ADD SP, i8",
    "E9: JP HL",
    "EA: LD (u16), A",
    "EB: UNUSED",
    "EC: UNUSED",
    "ED: UNUSED",
    "EE: XOR u8",
    "EF: RST 0x28",
    "f0: LD A, (0xFF00 + u8)",
    "F1: POP AF",
    "F2: LD A, (0xFF00 + C)",
    "F3: DI",
    "F4: UNUSED",
    "F5: PUSH AF",
    "F6: OR u8",
    "F7: RST 0x30",
    "F8: LD HL, SP+i8",
    "F9: LD SP, HL",
    "FA: LD A, (u16)",
    "FB: EI",
    "FC: UNUSED",
    "FD: UNUSED",
    "FE: CP u8",
    "FF: RST 0x38"
};

static const char* central_processing_unit_prefixed_instruction_mnemonics[256] =
{
    "CB 00: RLC B",
    "CB 01: RLC C",
    "CB 02: RLC D",
    "CB 03: RLC E",
    "CB 04: RLC H",
    "CB 05: RLC L",
    "CB 06: RLC (HL)",
    "CB 07: RLC A",
    "CB 08: RRC B",
    "CB 09: RRC C",
    "CB 0A: RRC D",
    "CB 0B: RRC E",
    "CB 0C: RRC H",
    "CB 0D: RRC L",
    "CB 0E: RRC (HL)",
    "CB 0F: RRC A",
    "CB 10: RL B",
    "CB 11: RL C",
    "CB 12: RL D",
    "CB 13: RL E",
    "CB 14: RL H",
    "CB 15: RL L",
    "CB 16: RL (HL)",
    "CB 17: RL A",
    "CB 18: RR B",
    "CB 19: RR C",
    "CB 1A: RR D",
    "CB 1B: RR E",
    "CB 1C: RR H",
    "CB 1D: RR L",
    "CB 1E: RR (HL)",
    "CB 1F: RR A",
    "CB 20: SLA B",
    "CB 21: SLA C",
    "CB 22: SLA D",
    "CB 23: SLA E",
    "CB 24: SLA H",
    "CB 25: SLA L",
    "CB 26: SLA (HL)",
    "CB 27: SLA A",
    "CB 28: SRA B",
    "CB 29: SRA C",
    "CB 2A: SRA D",
    "CB 2B: SRA E",
    "CB 2C: SRA H",
    "CB 2D: SRA L",
    "CB 2E: SRA (HL)",
    "CB 2F: SRA A",
    "CB 30: SWAP B",
    "CB 31: SWAP C",
    "CB 32: SWAP D",
    "CB 33: SWAP E",
    "CB 34: SWAP H",
    "CB 35: SWAP L",
    "CB 36: SWAP (HL)",
    "CB 37: SWAP A",
    "CB 38: SRL B",
    "CB 39: SRL C",
    "CB 3A: SRL D",
    "CB 3B: SRL E",
    "CB 3C: SRL H",
    "CB 3D: SRL L",
    "CB 3E: SRL (HL)",
    "CB 3F: SRL A",
    "CB 40: BIT 0, B",
    "CB 41: BIT 0, C",
    "CB 42: BIT 0, D",
    "CB 43: BIT 0, E",
    "CB 44: BIT 0, H",
    "CB 45: BIT 0, L",
    "CB 46: BIT 0, (HL)",
    "CB 47: BIT 0, A",
    "CB 48: BIT 1, B",
    "CB 49: BIT 1, C",
    "CB 4A: BIT 1, D",
    "CB 4B: BIT 1, E",
    "CB 4C: BIT 1, H",
    "CB 4D: BIT 1, L",
    "CB 4E: BIT 1, (HL)",
    "CB 4F: BIT 1, A",
    "CB 50: BIT 2, B",
    "CB 51: BIT 2, C",
    "CB 52: BIT 2, D",
    "CB 53: BIT 2, E",
    "CB 54: BIT 2, H",
    "CB 55: BIT 2, L",
    "CB 56: BIT 2, (HL)",
    "CB 57: BIT 2, A",
    "CB 58: BIT 3, B",
    "CB 59: BIT 3, C",
    "CB 5A: BIT 3, D",
    "CB 5B: BIT 3, E",
    "CB 5C: BIT 3, H",
    "CB 5D: BIT 3, L",
    "CB 5E: BIT 3, (HL)",
    "CB 5F: BIT 3, A",
    "CB 60: BIT 4, B",
    "CB 61: BIT 4, C",
    "CB 62: BIT 4, D",
    "CB 63: BIT 4, E",
    "CB 64: BIT 4, H",
    "CB 65: BIT 4, L",
    "CB 66: BIT 4, (HL)",
    "CB 67: BIT 4, A",
    "CB 68: BIT 5, B",
    "CB 69: BIT 5, C",
    "CB 6A: BIT 5, D",
    "CB 6B: BIT 5, E",
    "CB 6C: BIT 5, H",
    "CB 6D: BIT 5, L",
    "CB 6E: BIT 5, (HL)",
    "CB 6F: BIT 5, A",
    "CB 70: BIT 6, B",
    "CB 71: BIT 6, C",
    "CB 72: BIT 6, D",
    "CB 73: BIT 6, E",
    "CB 74: BIT 6, H",
    "CB 75: BIT 6, L",
    "CB 76: BIT 6, (HL)",
    "CB 77: BIT 6, A",
    "CB 78: BIT 7, B",
    "CB 79: BIT 7, C",
    "CB 7A: BIT 7, D",
    "CB 7B: BIT 7, E",
    "CB 7C: BIT 7, H",
    "CB 7D: BIT 7, L",
    "CB 7E: BIT 7, (HL)",
    "CB 7F: BIT 7, A",
    "CB 80: RES 0, B",
    "CB 81: RES 0, C",
    "CB 82: RES 0, D",
    "CB 83: RES 0, E",
    "CB 84: RES 0, H",
    "CB 85: RES 0, L",
    "CB 86: RES 0, (HL)",
    "CB 87: RES 0, A",
    "CB 88: RES 1, B",
    "CB 89: RES 1, C",
    "CB 8A: RES 1, D",
    "CB 8B: RES 1, E",
    "CB 8C: RES 1, H",
    "CB 8D: RES 1, L",
    "CB 8E: RES 1, (HL)",
    "CB 8F: RES 1, A",
    "CB 90: RES 2, B",
    "CB 91: RES 2, C",
    "CB 92: RES 2, D",
    "CB 93: RES 2, E",
    "CB 94: RES 2, H",
    "CB 95: RES 2, L",
    "CB 96: RES 2, (HL)",
    "CB 97: RES 2, A",
    "CB 98: RES 3, B",
    "CB 99: RES 3, C",
    "CB 9A: RES 3, D",
    "CB 9B: RES 3, E",
    "CB 9C: RES 3, H",
    "CB 9D: RES 3, L",
    "CB 9E: RES 3, (HL)",
    "CB 9F: RES 3, A",
    "CB A0: RES 4, B",
    "CB A1: RES 4, C",
    "CB A2: RES 4, D",
    "CB A3: RES 4, E",
    "CB A4: RES 4, H",
    "CB A5: RES 4, L",
    "CB A6: RES 4, (HL)",
    "CB A7: RES 4, A",
    "CB A8: RES 5, B",
    "CB A9: RES 5, C",
    "CB AA: RES 5, D",
    "CB AB: RES 5, E",
    "CB AC: RES 5, H",
    "CB AD: RES 5, L",
    "CB AE: RES 5, (HL)",
    "CB AF: RES 5, A",
    "CB B0: RES 6, B",
    "CB B1: RES 6, C",
    "CB B2: RES 6, D",
    "CB B3: RES 6, E",
    "CB B4: RES 6, H",
    "CB B5: RES 6, L",
    "CB B6: RES 6, (HL)",
    "CB B7: RES 6, A",
    "CB B8: RES 7, B",
    "CB B9: RES 7, C",
    "CB BA: RES 7, D",
    "CB BB: RES 7, E",
    "CB BC: RES 7, H",
    "CB BD: RES 7, L",
    "CB BE: RES 7, (HL)",
    "CB BF: RES 7, A",
    "CB C0: SET 0, B",
    "CB C1: SET 0, C",
    "CB C2: SET 0, D",
    "CB C3: SET 0, E",
    "CB C4: SET 0, H",
    "CB C5: SET 0, L",
    "CB C6: SET 0, (HL)",
    "CB C7: SET 0, A",
    "CB C8: SET 1, B",
    "CB C9: SET 1, C",
    "CB CA: SET 1, D",
    "CB CB: SET 1, E",
    "CB CC: SET 1, H",
    "CB CD: SET 1, L",
    "CB CE: SET 1, (HL)",
    "CB CF: SET 1, A",
    "CB D0: SET 2, B",
    "CB D1: SET 2, C",
    "CB D2: SET 2, D",
    "CB D3: SET 2, E",
    "CB D4: SET 2, H",
    "CB D5: SET 2, L",
    "CB D6: SET 2, (HL)",
    "CB D7: SET 2, A",
    "CB D8: SET 3, B",
    "CB D9: SET 3, C",
    "CB DA: SET 3, D",
    "CB DB: SET 3, E",
    "CB DC: SET 3, H",
    "CB DD: SET 3, L",
    "CB DE: SET 3, (HL)",
    "CB DF: SET 3, A",
    "CB E0: SET 4, B",
    "CB E1: SET 4, C",
    "CB E2: SET 4, D",
    "CB E3: SET 4, E",
    "CB E4: SET 4, H",
    "CB E5: SET 4, L",
    "CB E6: SET 4, (HL)",
    "CB E7: SET 4, A",
    "CB E8: SET 5, B",
    "CB E9: SET 5, C",
    "CB EA: SET 5, D",
    "CB EB: SET 5, E",
    "CB EC: SET 5, H",
    "CB ED: SET 5, L",
    "CB EE: SET 5, (HL)",
    "CB EF: SET 5, A",
    "CB f0: SET 6, B",
    "CB F1: SET 6, C",
    "CB F2: SET 6, D",
    "CB F3: SET 6, E",
    "CB F4: SET 6, H",
    "CB F5: SET 6, L",
    "CB F6: SET 6, (HL)",
    "CB F7: SET 6, A",
    "CB F8: SET 7, B",
    "CB F9: SET 7, C",
    "CB FA: SET 7, D",
    "CB FB: SET 7, E",
    "CB FC: SET 7, H",
    "CB FD: SET 7, L",
    "CB FE: SET 7, (HL)",
    "CB FF: SET 7, A"
};

} // namespace GameBoyCore
